name: build
on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
  workflow_dispatch:
    inputs:
      branch_service:
        description: 'Service branch'
        required: true
        default: 'master'
      branch_authorization:
        description: 'Authorization branch'
        required: true
        default: 'master'
      branch_gateway:
        description: 'Gateway branch'
        required: true
        default: 'master'
      branch_integration:
        description: 'Integration branch'
        required: true
        default: 'master'
      branch_ui:
        description: 'UI branch'
        required: true
        default: 'master'
concurrency:
  group: ${{ github.repository }}
  cancel-in-progress: false
env:
   MAVEN_OPTS: -Xmx1g
jobs:
   build:
      runs-on: ubuntu-latest
      steps:
      -  name: Get current date
         id: date
         run: echo "date=$(date +'%Y-%m-%d')"  >> $GITHUB_OUTPUT
      -  uses: actions/checkout@v4
      -  name: Set up JDK 21
         uses: actions/setup-java@v4
         with:
            distribution: 'zulu'
            java-version: 21
      -  name: Cache Maven packages
         uses: actions/cache@v4
         with:
            path: ~/.m2
            key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            restore-keys: ${{ runner.os }}-m2
      -  name: maven-settings-xml-action
         uses: whelk-io/maven-settings-xml-action@v22
         with:
            repositories: '[{ "id": "repository.spring.milestone", "url": "https://repo.spring.io/milestone" }]'
            plugin_repositories: '[{ "id": "repository.spring.milestone", "url": "https://repo.spring.io/milestone" }]'
      -  name: Checkout exemple service
         uses: actions/checkout@v4
         with:
            path: exemple-service
            repository: doudouchat/exemple-service
            ref: ${{ github.event.inputs.branch_service }}
      -  name: Checkout exemple authorization
         uses: actions/checkout@v4
         with:
            path: exemple-authorization
            repository: doudouchat/exemple-authorization
            ref: ${{ github.event.inputs.branch_authorization }}
      -  name: Checkout exemple gateway
         uses: actions/checkout@v4
         with:
            path: exemple-gateway
            repository: doudouchat/exemple-gateway
            ref: ${{ github.event.inputs.branch_gateway }}
      -  name: Checkout exemple integration
         uses: actions/checkout@v4
         with:
            path: exemple-integration
            repository: doudouchat/exemple-integration
            ref: ${{ github.event.inputs.branch_integration }}
      -  name: Get npm cache directory
         id: npm-cache-dir
         shell: bash
         run: |
           echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      -  uses: actions/cache@v4
         id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
         with:
           path: ${{ steps.npm-cache-dir.outputs.dir }}
           key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
           restore-keys: |
            ${{ runner.os }}-node-
      -  name: Use Node.js 22.13.0
         uses: actions/setup-node@v4
         with:
            node-version: 22.13.0
      -  name: Checkout exemple ui
         uses: actions/checkout@v4
         with:
            path: exemple-ui
            repository: doudouchat/exemple-ui
            ref: ${{ github.event.inputs.branch_ui }}
      -  name: launch zookeeper
         run: |
           docker compose up -d zookeeper
           ./wait-for-container-ready.sh exemple-zookeeper
           docker container exec exemple-zookeeper ls -la          
           docker container exec exemple-zookeeper bin/zkCli.sh create /authorization
           docker container exec exemple-zookeeper bin/zkCli.sh create /authorization/resource
           docker container exec exemple-zookeeper bin/zkCli.sh set /authorization/resource '{
               "id": "resource",
               "clientId": "resource",
               "clientSecret": "{bcrypt}$2a$10$FTfSAcT9WVzgHIPqT6dGU.THUVQNReDhMXlB.aq1C8FCPPktD2.Lq",
               "clientAuthenticationMethods": [
                   "client_secret_basic"
               ],
               "authorizationGrantTypes": [
                   "client_credentials"
               ],
               "requireAuthorizationConsent": false
           }'
           docker container exec exemple-zookeeper bin/zkCli.sh create /authorization/test_service
           docker container exec exemple-zookeeper bin/zkCli.sh set /authorization/test_service '{
               "id": "test_service",
               "clientId": "test_service",
               "clientSecret": "{bcrypt}$2a$10$FTfSAcT9WVzgHIPqT6dGU.THUVQNReDhMXlB.aq1C8FCPPktD2.Lq",
               "clientAuthenticationMethods": [
                   "client_secret_basic"
               ],
               "authorizationGrantTypes": [
                   "client_credentials"
               ],
               "requireAuthorizationConsent": false,
               "scopes": [
                   "account:create",
                   "login:head",
                   "login:create",
                   "subscription:update",
                   "subscription:read",
                   "ROLE_APP"
               ]
           }'
           docker container exec exemple-zookeeper bin/zkCli.sh create /authorization/test_service_user
           docker container exec exemple-zookeeper bin/zkCli.sh set /authorization/test_service_user '{
               "id": "test_service_user",
               "clientId": "test_service_user",
               "authorizationGrantTypes": [
                   "authorization_code",
                   "refresh"
               ],
               "requireAuthorizationConsent": false,
               "clientAuthenticationMethods": [
                   "none"
               ],
               "redirectUris": [
                   "http://xxx"
               ],
               "scopes": [
                   "account:read",
                   "account:update",
                   "login:create",
                   "login:update",
                   "login:delete",
                   "login:read",
                   "login:head"
               ]
           }'
           docker container exec exemple-zookeeper bin/zkCli.sh create /application
           docker container exec exemple-zookeeper bin/zkCli.sh create /application/test
           docker container exec exemple-zookeeper bin/zkCli.sh set /application/test '{
               "keyspace": "test_service",
               "authorization_keyspace": "test_authorization",
               "company": "test_company",
               "authorization_clientIds": [
                   "test_service",
                   "test_service_user"
               ],
               "clientIds": [
                   "test_service",
                   "test_service_user"
               ],
               "account": {
                   "uniqueProperties": [ "email" ]
               }
           }'
      -  name: launch hazelcast
         run: |
           docker compose up -d hazelcast
      -  name: launch kafka
         run: docker compose up -d kafka
      -  name: launch cassandra
         run: |
            mkdir resources
            cp -r ${{ github.workspace }}/exemple-integration/src/test/resources/cassandra resources
            cp conf/service/schemas/test_service_schema.cql resources/cassandra
            docker compose up -d cassandra
            ./wait-for-container-ready.sh exemple-cassandra
            docker container exec exemple-cassandra cqlsh --debug -f /usr/local/tmp/cassandra/service.cql
            docker container exec exemple-cassandra cqlsh --debug -f /usr/local/tmp/cassandra/authorization.cql
            docker container exec exemple-cassandra cqlsh --debug -f /usr/local/tmp/cassandra/exec.cql
            docker container exec exemple-cassandra cqlsh --debug -f /usr/local/tmp/cassandra/test_service_schema.cql
      -  name: Build exemple authorization
         run: |
            mvn -f ${{ github.workspace }}/exemple-authorization --batch-mode clean install -Dmaven.test.skip=true
            TOMCAT_VERSION=$(mvn -f ${{ github.workspace }}/exemple-authorization help:evaluate -Dexpression=tomcat.version -q -DforceStdout)-jdk21
            echo tomcat version is $TOMCAT_VERSION
            docker build -t exemple-authorization --build-arg VERSION_TOMCAT=${TOMCAT_VERSION} ${{ github.workspace }}/exemple-authorization
            docker compose up -d authorization
      -  name: Build exemple service
         run: |
            mvn -f ${{ github.workspace }}/exemple-service --batch-mode clean install -Dmaven.test.skip=true
            TOMCAT_VERSION=$(mvn -f ${{ github.workspace }}/exemple-service help:evaluate -Dexpression=tomcat.version -q -DforceStdout)-jdk21
            echo tomcat version is $TOMCAT_VERSION
            docker build -t exemple-service --build-arg VERSION_TOMCAT=${TOMCAT_VERSION} ${{ github.workspace }}/exemple-service
            docker compose up -d service
      -  name: Build exemple gateway
         run: |
            mvn -f ${{ github.workspace }}/exemple-gateway --batch-mode clean install -Dmaven.test.skip=true
            docker build -t exemple-gateway --build-arg VERSION_OPENJDK=21-jdk ${{ github.workspace }}/exemple-gateway
            docker compose -f docker-compose.yml -f docker-compose.browser.yml up -d gateway
      -  name: Build exemple ui
         run: |
            docker build -t exemple-ui --build-arg VERSION_NODE=20.14.0 --build-arg VERSION_NGINX=1.24.0 ${{ github.workspace }}/exemple-ui
            docker compose up -d ui
      -  name: check authorization
         run: ./wait-for-container-ready.sh exemple-authorization
      -  name: check service
         run: ./wait-for-container-ready.sh exemple-service
      -  name: check gateway
         run: ./wait-for-container-ready.sh exemple-gateway
      -  name: pre-test exemple
         run: |
            npm ci
            npm run-script test
      -  name: test exemple ui
         working-directory: ${{ github.workspace }}/exemple-ui/exemple-ui-front
         run: |
            npm ci
            rm -rf node_modules/@types/long
            npm run-script e2e:docker
      -  name: display logs hazelcast
         if: ${{ always() }}
         run: docker container logs exemple-hazelcast
      -  name: display logs zookeeper
         if: ${{ always() }}
         run: docker container logs exemple-zookeeper
      -  name: display logs kafka
         if: ${{ always() }}
         run: docker container logs exemple-kafka
      -  name: display logs cassandra
         if: ${{ always() }}
         run: docker container logs exemple-cassandra
      -  name: display logs service
         if: ${{ always() }}
         run: docker container logs exemple-service
      -  name: display logs authorization
         if: ${{ always() }}
         run: docker container logs exemple-authorization
      -  name: display logs gateway
         if: ${{ always() }}
         run: docker container logs exemple-gateway
      -  name: display logs service
         if: ${{ always() }}
         run: docker container exec exemple-service cat logs/archive/exemple_service.${{ steps.date.outputs.date }}.log
      -  name: display logs authorization
         if: ${{ always() }}
         run: docker container exec exemple-authorization cat logs/archive/exemple_authorization.${{ steps.date.outputs.date }}.log
      -  name: display logs gateway
         if: ${{ always() }}
         run: docker container exec exemple-gateway cat tmp/logs/archive/exemple_gateway.${{ steps.date.outputs.date }}.log
      -  name: display logs ui
         if: ${{ always() }}
         run: docker container logs exemple-ui
